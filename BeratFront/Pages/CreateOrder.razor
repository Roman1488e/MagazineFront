@page "/createorder/{CustomerId:guid}"
@using System.ComponentModel.DataAnnotations
@inject HttpClient Http
@inject NavigationManager Nav

<h3 style="text-align:center; margin-top: 20px;">Create Order</h3>

<style>
    .form-container {
        max-width: 500px;
        margin: auto;
        padding: 20px;
        font-family: sans-serif;
    }

    input, select {
        width: 100%;
        padding: 10px;
        margin-top: 8px;
        margin-bottom: 16px;
        border: 1px solid #ccc;
        border-radius: 6px;
    }

    label {
        font-weight: bold;
    }

    .submit-btn {
        background-color: #0078d4;
        color: white;
        padding: 10px 20px;
        border: none;
        border-radius: 6px;
        cursor: pointer;
    }

    .submit-btn:hover {
        background-color: #005fa3;
    }

    .validation-message {
        color: red;
        font-size: 14px;
    }
</style>

<div class="form-container">
    <EditForm Model="orderModel" OnValidSubmit="HandleSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <label>Product Name</label>
        <InputText @bind-Value="orderModel.ProductName" />
        <ValidationMessage For="@(() => orderModel.ProductName)" class="validation-message" />

        <label>Total Price</label>
        <InputNumber @bind-Value="orderModel.TotalPrice" />
        <ValidationMessage For="@(() => orderModel.TotalPrice)" class="validation-message" />

        <label>Paid Amount</label>
        <InputNumber @bind-Value="orderModel.PaidAmount" />
        <ValidationMessage For="@(() => orderModel.PaidAmount)" class="validation-message" />

        <label>Remind In (Months)</label>
        <InputNumber @bind-Value="orderModel.RemindInMonths" />

        <button type="submit" class="submit-btn">Submit Order</button>
    </EditForm>
</div>

@code {
[Parameter] public Guid CustomerId { get; set; }

private CreateOrderModel orderModel = new();

protected override void OnInitialized()
{
orderModel.CustomerId = CustomerId;
}

private async Task HandleSubmit()
{
var response = await Http.PostAsJsonAsync("/api/order/create", orderModel);

if (response.IsSuccessStatusCode)
{
Nav.NavigateTo("/");
}
else
{
Console.WriteLine("Error creating order: " + response.StatusCode);
}
}

public class CreateOrderModel : IValidatableObject
{
public Guid CustomerId { get; set; }

[Required(ErrorMessage = "Product name is required")]
public string ProductName { get; set; } = "";

[Range(0.01, double.MaxValue, ErrorMessage = "Total price must be greater than 0")]
public decimal TotalPrice { get; set; }

[Range(0.01, double.MaxValue, ErrorMessage = "Paid amount must be greater than 0")]
public decimal PaidAmount { get; set; }

public int RemindInMonths { get; set; }

public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
{
if (PaidAmount > TotalPrice)
{
yield return new ValidationResult(
"Paid amount cannot be greater than total price",
new[] { nameof(PaidAmount) });
}
}
}
}
