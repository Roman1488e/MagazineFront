@page "/statistics"
@inject HttpClient Http

<h3 style="text-align:center; margin-top: 20px;">📊 İstatistikler</h3>

@if (paymentStatistic == null || generalStatistic == null || debtStatistic == null)
{
    <p style="text-align:center;">Yükleniyor...</p>
}
else
{
    <div style="text-align:center; margin-bottom: 30px;">
        <label for="monthSelect">📅 Ay seçiniz:</label>
        <select @bind="selectedMonth" @bind:event="onchange" id="monthSelect" style="margin-left: 10px; padding: 5px;">
            @foreach (var m in paymentStatistic.MounthEarnings.OrderByDescending(m => m.Year).ThenByDescending(m => m.Month))
            {
                <option value="@($"{m.Year}-{m.Month}")">@($"{m.MonthName} {m.Year}")</option>
            }
        </select>
    </div>

    @if (selectedEarnings != null)
    {
        <div style="text-align:center; font-size: 20px; margin-bottom: 20px;">
            💰 @selectedEarnings.MonthName @selectedEarnings.Year Ayında kazanılan: 
            <strong>@selectedEarnings.Amount.ToString("C")</strong>
        </div>
    }

    <div style="display: flex; flex-wrap: wrap; justify-content: center; gap: 30px; margin-top: 20px;">
        <div class="card">
            <h4>📈 Toplam kazanç</h4>
            <p>@paymentStatistic.EarnedForAllTime.ToString("C")</p>
        </div>

        <div class="card">
            <h4>🧾 Aktif alacak sayısı</h4>
            <p>@generalStatistic.NotPaidDebts</p>
        </div>
        <div class="card">
            <h4>📦 Total Orders</h4>
            <p>@generalStatistic.TotalOrders</p>
        </div>

        <div class="card">
            <h4>✅ Paid Orders</h4>
            <p>@generalStatistic.PaidOrders</p>
        </div>

        <div class="card">
            <h4>👥 Total Clients</h4>
            <p>@generalStatistic.TotalClients</p>
        </div>

        <div class="card">
            <h4>💸 Total Debt Amount</h4>
            <p>@debtStatistic.TotalDebtAmount.ToString("C")</p>
        </div>
    </div>
}

<style>
    #blazor-error-ui {
        display: none;
    }

    .card {
        padding: 20px;
        border: 1px solid #ccc;
        border-radius: 10px;
        background-color: #f9f9f9;
        text-align: center;
        min-width: 200px;
        width: 220px;
        box-shadow: 0 2px 5px rgba(0,0,0,0.1);
    }

    .card h4 {
        margin-bottom: 10px;
        color: #0078d4;
    }

    .card p {
        font-size: 22px;
        font-weight: bold;
    }

    @@media (max-width: 600px) {
        .card {
            width: 100%;
        }
    }
</style>

@code {
    private PaymentStatisticDto? paymentStatistic;
    private GeneralStatisticDto? generalStatistic;
    private DebtStatisticDto? debtStatistic;

    private string? selectedMonth;
    private MounthEarnings? selectedEarnings;

    protected override async Task OnInitializedAsync()
    {
        paymentStatistic = await Http.GetFromJsonAsync<PaymentStatisticDto>("/api/paymenthistory/statistic");
        generalStatistic = await Http.GetFromJsonAsync<GeneralStatisticDto>("/api/order/statistics");
        debtStatistic = await Http.GetFromJsonAsync<DebtStatisticDto>("/api/debt/statistics");

        // автоустановка на текущий месяц
        var current = DateTime.Now;
        selectedMonth = $"{current.Year}-{current.Month}";
        SetSelectedEarnings();
    }

    private void OnMonthChanged(ChangeEventArgs e)
    {
        selectedMonth = e.Value?.ToString();
        SetSelectedEarnings();
    }

    private void SetSelectedEarnings()
    {
        if (string.IsNullOrEmpty(selectedMonth) || paymentStatistic?.MounthEarnings == null)
            return;

        var parts = selectedMonth.Split("-");
        if (int.TryParse(parts[0], out var year) && int.TryParse(parts[1], out var month))
        {
            selectedEarnings = paymentStatistic.MounthEarnings
                .FirstOrDefault(x => x.Year == year && x.Month == month);
        }
    }

    public class PaymentStatisticDto
    {
        public decimal EarnedToday { get; set; }
        public decimal EarnedForAllTime { get; set; }
        public List<MounthEarnings> MounthEarnings { get; set; } = new();
    }

    public class MounthEarnings
    {
        public decimal Amount { get; set; }
        public int Month { get; set; }
        public int Year { get; set; }
        public string MonthName { get; set; } = "";
    }

    public class GeneralStatisticDto
    {
        public int NotPaidDebts { get; set; }
        public int TotalOrders { get; set; }
        public int PaidOrders { get; set; }
        public int TotalClients { get; set; }
    }

    public class DebtStatisticDto
    {
        public decimal TotalDebtAmount { get; set; }
    }
}
