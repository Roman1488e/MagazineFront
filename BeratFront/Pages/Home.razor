@page "/"
@inject HttpClient Http
@inject NavigationManager NavigationManager

@if (reminders?.Any() == true)
{
    <div class="reminder-popup">
        <h4>🔔 Напоминания:</h4>
        <ul>
            @foreach (var reminder in reminders)
            {
                <li>
                    Заказ №@reminder.OrderNumber — @reminder.ReminderDate?.ToString("dd.MM.yyyy HH:mm")
                    <button @onclick="() => NavigateToOrder(reminder.OrderId)">Открыть</button>
                </li>
            }
        </ul>
    </div>
}

<div class="fullscreen-grid">
    <div class="tile" @onclick="NavigateToCreateOrder">
        <span class="icon">➕</span>
        <span>New Order</span>
    </div>
    <div class="tile" @onclick="NavigateToStatistics">
        <span class="icon">📊</span>
        <span>Statistics</span>
    </div>
    <div class="tile" @onclick="NavigateToManage">
        <span class="icon">💰</span>
        <span>Manage Data</span>
    </div>
    <div class="tile" @onclick="NavigateToSearch">
        <span class="icon">🔍</span>
        <span>Search</span>
    </div>
</div>

<style>
    .reminder-popup {
        position: fixed;
        top: 20px;
        right: 20px;
        background-color: #fff3cd;
        color: #856404;
        border: 1px solid #ffeeba;
        padding: 15px;
        border-radius: 8px;
        box-shadow: 0 2px 8px rgba(0,0,0,0.2);
        z-index: 9999;
    }

    .reminder-popup h4 {
        margin-top: 0;
    }

    .reminder-popup ul {
        list-style: none;
        padding-left: 0;
    }

    .reminder-popup li {
        margin-bottom: 10px;
    }

    .reminder-popup button {
        margin-left: 10px;
        padding: 4px 8px;
        font-size: 14px;
    }

    /* остальной CSS без изменений */
</style>

@code {
    private List<ReminderDto>? reminders;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            reminders = await Http.GetFromJsonAsync<List<ReminderDto>>("api/order/reminders");
        }
        catch
        {
            // Обработка ошибок при запросе
        }
    }

    void NavigateToCreateOrder() => NavigationManager.NavigateTo("/clients");
    void NavigateToStatistics() => NavigationManager.NavigateTo("/statistics");
    void NavigateToManage() => NavigationManager.NavigateTo("/managedata");
    void NavigateToSearch() => NavigationManager.NavigateTo("/search");
    void NavigateToOrder(Guid orderId) => NavigationManager.NavigateTo($"/orders/detail/{orderId}");

    public class ReminderDto
    {
        public Guid OrderId { get; set; }
        public DateTime? ReminderDate { get; set; }
        public int OrderNumber { get; set; }
    }
}
